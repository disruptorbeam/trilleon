/* 
+   This file is part of Trilleon.  Trilleon is a client automation framework.
+  
+   Copyright (C) 2017 Disruptor Beam
+  
+   Trilleon is free software: you can redistribute it and/or modify
+   it under the terms of the GNU Lesser General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

ï»¿using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Diagnostics;
using UnityEngine;

namespace TrilleonAutomation {

	/// <summary>
	/// "UnityTest"; as in "Unit-like Test". Specifically designed to unit test methods and functionality that cannot be tested at compilation time.
	/// Behaves very similar to regular integration automation tests in Trilleon, but optimized to NOT test things in the app as a user would.
	/// </summary>
	public class UnityTestBase : MonoBehaviour {

		/// <summary>
		/// Get values from private and protected fields that you do not want to make public just for unit testing purposes.
		/// </summary>
		public RT GetFieldValue<C,RT>(string fieldName) where C : MonoBehaviour {

            FieldInfo fieldInfo = typeof(C).GetField(fieldName, BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static);
			return (RT)fieldInfo.GetValue((System.Object)this.GetComponent(typeof(C).Name));

		}

		/// <summary>
		/// Get values from private and protected properties that you do not want to make public just for unit testing purposes.
		/// This ONLY works for auto-properties. You cannot retrieve the value generated by a property that does not contain a backing field,
		/// and if an explicit variable exists to store the value, you should retrieve the value from that field rather than a property.
		/// </summary>
		public RT GetPropertyValue<C,RT>(string propertyName) where C : MonoBehaviour {

            PropertyInfo propertyInfo = typeof(C).GetProperty(propertyName, BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static);
			return (RT)propertyInfo.GetValue((System.Object)this.GetComponent(typeof(C).Name), null);

		}

		/// <summary>
		/// Find and launch a MonoBehaviour's private IEnumerator.
		/// </summary>
		public IEnumerator LaunchPrivateCoroutine<T>(GameObject obj, string methodName, params object[] args) where T : MonoBehaviour {

			Type monoType = typeof(T);
			MonoBehaviour mono = obj.GetComponent<T>() as MonoBehaviour;
			MethodInfo coroutine = monoType.GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance);
			if(coroutine == null) {

				U.assert.Fail(string.Format("Could not find a method matching the name \"{0}\" under the Monobehaviour \"{1}\"", methodName, monoType.Name));

			} else {
				
				IEnumerator enumerator = (IEnumerator)coroutine.Invoke(mono, args); //Get the test method as an IEnumerator so that it can be launched as a coroutine. 
				yield return StartCoroutine(enumerator);

			}

		}

		/// <summary>
		/// Gets variable value from a private Field or Property (backing field).
		/// </summary>
		public RV GetPrivateVariableValue<Class,RV>(GameObject obj, string fieldName) {

			FieldInfo field = obj.GetComponent<Class>().GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance).ToList().Find(x => x.Name == fieldName || x.Name.Contains("BackingField") && x.Name.Contains(string.Format("<{0}>", fieldName)));
			if(field == null) {

				U.assert.Fail(string.Format("Could not find a field matching the name \"{0}\" under the Type \"{1}\"", fieldName, typeof(Class).Name));
				return default(RV);

			} else {

				return (RV)field.GetValue(obj.GetComponent<Class>());

			}

		}
		public RV GetPrivateVariableValue<Class,RV>(Class instance, string fieldName) {

			FieldInfo field = instance.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance).ToList().Find(x => x.Name == fieldName || x.Name.Contains("BackingField") && x.Name.Contains(string.Format("<{0}>", fieldName)));
			if(field == null) {

				U.assert.Fail(string.Format("Could not find a field matching the name \"{0}\" under the Type \"{1}\"", fieldName, typeof(Class).Name));
				return default(RV);

			} else {

				return (RV)field.GetValue(instance);

			}

		}

	}

}
